AWSTemplateFormatVersion: 2010-09-09
Description: 

    VPC, with a 3 public and  5 private subnets in 3 Availability Zones. 
    
### Metadata
Metadata:
    AWS::CloudFormation::Interface:
        ParameterGroups:
            -
             Label:
                default: "Network configuration"
             Parameters:
                - VpcCIDR
                - PublicSubnet1CIDR
                - PublicSubnet2CIDR
                - PublicSubnet3CIDR
                - PrivateSubnet1CIDR
                - PrivateSubnet2CIDR
                - PrivateSubnet3CIDR
                - PrivateSubnet4CIDR
                - PrivateSubnet5CIDR
            -
             Label:
                default: "Database Configuration"
             Parameters:
                - DatabaseUsername
                - DatabasePassword
                - DatabaseClusterParameterGroupName
            - 
             Label:
                default: "S3 Buckets"
             Parameters:
                - S3ImageBucketName
                - S3JobBucketName
            - 
             Label:
                default: "Lambda Configuration"
             Parameters:
                - S3BucketforImporter
                - ImporterLocation


            
      #  ParameterLabels:
            


####

Mappings:
    '593223377027':
       eu-central-1:
           InstanceType: db.r4.large
           BackupRetentionPeriod: 7
           dbport: 3306
           imagestore: livijalonneimagesdev
           dbmultiaz: false
           defaultdbusername: jallonnendev
           defaultdbPass: 1234W1sdsdsf3dev #please do not use this
           defautTagname: Jalonnen

Parameters:
    DatabaseClusterParameterGroupName:
        Type: String
        Default: "default.aurora-postgresql9.6"

    S3JobBucketName:
        AllowedPattern: "[a-z0-9]+"
        Description: "S3 that will be created with this template. Name has to be unique"
        ConstraintDescription: "Allowed input numbers and small letters (should not start with number)"
        Type: String
        Default: "jalonnejobbucket"
        
    S3ImageBucketName:
        AllowedPattern: "[a-z0-9]+"
        Description: Already existing S3 buckets to hold Jalonne Images
        ConstraintDescription: "Allowed input numbers and small letters (should not start with number)"
        Type: String
        Default: "jalonnekuvat"

        
    Snapshotidentifier: #remove if snapshot is not needed
        Description: "snapshot ARN identifier if restoring from snapshot (leave empty if creating new)"
        Type: String
        Default: "arn#"
    
    S3BucketforImporter:
        Type: String
        Description: Which S3 bucket contains Lambda function for importer
        Default: livijalonnelambda

    ImporterLocation:
        Type: String
        Description: Path to importer in S3
        Default: jalonne.zip 
    
    DatabaseUsername:
        AllowedPattern: "[a-zA-Z0-9]+"
        ConstraintDescription: must be between 1 to 16 alphanumeric characters.
        Description: The database admin account user name, between 1 to 16 alphanumeric characters.
        MaxLength: '16'
        MinLength: '1'
        Type: String
        Default: jalonne 
    DatabasePassword:
        AllowedPattern: "[a-zA-Z0-9]+"
        ConstraintDescription: must be between 8 to 41 alphanumeric characters.
        Description: The database admin account password, between 8 to 41 alphanumeric characters. Never use default on anything but testing stack creation
        MaxLength: '41'
        MinLength: '8'
        NoEcho: 'true'
        Type: String
        Default: 1234W1sdsdsf3 ##NEVER USE!!!!
   
    EnvironmentName:
        Description: An environment name that will be prefixed to resource names
        Type: String
        Default: Jalonne
    
    VpcCIDR:
        Description: Please enter the IP range (CIDR notation) for this VPC
        Type: String
        Default: 10.0.0.0/22

    PublicSubnet1CIDR:
        Description: Please enter the IP range (CIDR notation) for the public subnet in the first Availability Zone
        Type: String
        Default: 10.0.0.0/28

    PublicSubnet2CIDR:
    
        Description: Please enter the IP range (CIDR notation) for the public subnet in the second Availability Zone
        Type: String
        Default: 10.0.0.16/28

    PublicSubnet3CIDR:
    
        Description: Please enter the IP range (CIDR notation) for the public subnet in the second Availability Zone
        Type: String
        Default: 10.0.0.32/28
       

    PrivateSubnet1CIDR:
        Description: Please enter the IP range (CIDR notation) for the private subnet in the first db Availability Zone
        Type: String
        Default: 10.0.0.48/28

    PrivateSubnet2CIDR:
        Description: Please enter the IP range (CIDR notation) for the private subnet in the second db Availability Zone
        Type: String
        Default: 10.0.0.64/28
    
    PrivateSubnet3CIDR:
        Description: Please enter the IP range (CIDR notation) for the private subnet in the third db Availability Zone
        Type: String
        Default: 10.0.0.80/28  

    PrivateSubnet4CIDR:
        Description: Please enter the IP range (CIDR notation) for the private Lambda subnet in the First Availability Zone
        Type: String
        Default: 10.0.2.0/24        

    PrivateSubnet5CIDR:
        Description: Please enter the IP range (CIDR notation) for the private Lambda subnet in the Second Availability Zone
        Type: String
        Default: 10.0.3.0/24     
    
    JalonneKeyPair: 
       Description: Amazon EC2 Key Pair
       Type: "AWS::EC2::KeyPair::KeyName"
    
    EnvType: 
       Description: Environment type
       Default: test
       Type: String
       AllowedValues: 
         - prod
         - test
       ConstraintDescription: Must specify prod or test. In prod database is restored from snapshot 

Conditions: 
  CreateProdResources: !Equals [ !Ref EnvType, prod ]

Resources:

    VPC: 
        Type: AWS::EC2::VPC
        Properties:
            CidrBlock: !Ref VpcCIDR
            Tags: 
                - Key: Name 
                  Value: !Ref EnvironmentName            

    InternetGateway:
        Type: AWS::EC2::InternetGateway
        Properties:
            Tags:
                - Key: Name
                  Value: !Ref EnvironmentName            

    InternetGatewayAttachment:
        Type: AWS::EC2::VPCGatewayAttachment
        Properties:
            InternetGatewayId: !Ref InternetGateway
            VpcId: !Ref VPC

    PublicSubnet1: 
        Type: AWS::EC2::Subnet
        Properties:
            VpcId: !Ref VPC
            AvailabilityZone: !Select [ 0, !GetAZs '' ]
            CidrBlock: !Ref PublicSubnet1CIDR
            MapPublicIpOnLaunch: true
            Tags: 
                - Key: Name 
                  Value: !Sub ${EnvironmentName} Public Subnet (AZ1)

    PublicSubnet2: 
        Type: AWS::EC2::Subnet
        Properties:
            VpcId: !Ref VPC
            AvailabilityZone: !Select [ 1, !GetAZs '' ]
            CidrBlock: !Ref PublicSubnet2CIDR
            MapPublicIpOnLaunch: true
            Tags: 
                - Key: Name 
                  Value: !Sub ${EnvironmentName} Public Subnet (AZ2)
    
    PublicSubnet3: 
        Type: AWS::EC2::Subnet
        Properties:
            VpcId: !Ref VPC
            AvailabilityZone: !Select [ 2, !GetAZs '' ]
            CidrBlock: !Ref PublicSubnet3CIDR
            MapPublicIpOnLaunch: true
            Tags: 
                - Key: Name 
                  Value: !Sub ${EnvironmentName} Public Subnet (AZ3)                  

    PrivateSubnet1: 
        Type: AWS::EC2::Subnet
        Properties:
            VpcId: !Ref VPC
            AvailabilityZone: !Select [ 0, !GetAZs '' ]
            CidrBlock: !Ref PrivateSubnet1CIDR
            MapPublicIpOnLaunch: false
            Tags: 
                - Key: Name 
                  Value: !Sub ${EnvironmentName} Private Subnet (AZ1)

    PrivateSubnet2:
        Type: AWS::EC2::Subnet
        Properties:
            VpcId: !Ref VPC
            AvailabilityZone: !Select [ 1, !GetAZs '' ]
            CidrBlock: !Ref PrivateSubnet2CIDR
            MapPublicIpOnLaunch: false
            Tags: 
                - Key: Name 
                  Value: !Sub ${EnvironmentName} Private Subnet (AZ2)
    PrivateSubnet3:
        Type: AWS::EC2::Subnet
        Properties:
            VpcId: !Ref VPC
            AvailabilityZone: !Select [ 2, !GetAZs '' ]
            CidrBlock: !Ref PrivateSubnet3CIDR
            MapPublicIpOnLaunch: false
            Tags: 
                - Key: Name 
                  Value: !Sub ${EnvironmentName} Private Subnet (AZ3)
                  
                  
    PrivateSubnet4:
        Type: AWS::EC2::Subnet
        Properties:
            VpcId: !Ref VPC
            AvailabilityZone: !Select [ 1, !GetAZs '' ]
            CidrBlock: !Ref PrivateSubnet4CIDR
            MapPublicIpOnLaunch: false
            Tags: 
                - Key: Name 
                  Value: !Sub ${EnvironmentName} Private Subnet (AZ3)
                  
    PrivateSubnet5:
        Type: AWS::EC2::Subnet
        Properties:
            VpcId: !Ref VPC
            AvailabilityZone: !Select [ 2, !GetAZs '' ]
            CidrBlock: !Ref PrivateSubnet5CIDR
            MapPublicIpOnLaunch: false
            Tags: 
                - Key: Name 
                  Value: !Sub ${EnvironmentName} Private Subnet (AZ3)
                  
                  
    NatGateway1EIP:        
        Type: AWS::EC2::EIP
        DependsOn: InternetGatewayAttachment
        Properties:
            Domain: vpc
    
    NatGateway2EIP:
        Type: AWS::EC2::EIP
        DependsOn: InternetGatewayAttachment
        Properties:
            Domain: vpc
   
    NatGateway3EIP:
        Type: AWS::EC2::EIP
        DependsOn: InternetGatewayAttachment
        Properties:
            Domain: vpc            

    NatGateway1: 
        Type: AWS::EC2::NatGateway
        Properties: 
            AllocationId: !GetAtt NatGateway1EIP.AllocationId
            SubnetId: !Ref PublicSubnet1
            Tags:
                - Key: Name
                  Value: Jalonne-NatGateway1
    NatGateway2: 
        Type: AWS::EC2::NatGateway
        Properties:
            AllocationId: !GetAtt NatGateway2EIP.AllocationId
            SubnetId: !Ref PublicSubnet2    
    NatGateway3: 
        Type: AWS::EC2::NatGateway
        Properties:
            AllocationId: !GetAtt NatGateway3EIP.AllocationId
            SubnetId: !Ref PublicSubnet3            

    PublicRouteTable:
        Type: AWS::EC2::RouteTable
        Properties: 
            VpcId: !Ref VPC
            Tags: 
                - Key: Name 
                  Value: !Sub ${EnvironmentName} Public Routes

    DefaultPublicRoute: 
        Type: AWS::EC2::Route

        DependsOn: InternetGatewayAttachment
        Properties: 
            RouteTableId: !Ref PublicRouteTable
            DestinationCidrBlock: 0.0.0.0/0
            GatewayId: !Ref InternetGateway
            

    PublicSubnet1RouteTableAssociation:
        Type: AWS::EC2::SubnetRouteTableAssociation
        Properties:
            RouteTableId: !Ref PublicRouteTable
            SubnetId: !Ref PublicSubnet1

    PublicSubnet2RouteTableAssociation:
        Type: AWS::EC2::SubnetRouteTableAssociation
        Properties:
            RouteTableId: !Ref PublicRouteTable
            SubnetId: !Ref PublicSubnet2
    
    PublicSubnet3RouteTableAssociation:
        Type: AWS::EC2::SubnetRouteTableAssociation
        Properties:
            RouteTableId: !Ref PublicRouteTable
            SubnetId: !Ref PublicSubnet3
            
    PrivateRouteTable1:
        Type: AWS::EC2::RouteTable
        Properties: 
            VpcId: !Ref VPC
            Tags: 
                - Key: Name 
                  Value: !Sub ${EnvironmentName} Private Routes (AZ1)

    DefaultPrivateRoute1:
        Type: AWS::EC2::Route
        Properties:
            RouteTableId: !Ref PrivateRouteTable1
            DestinationCidrBlock: 0.0.0.0/0
            NatGatewayId: !Ref NatGateway1

    PrivateSubnet1RouteTableAssociation:
        Type: AWS::EC2::SubnetRouteTableAssociation
        Properties:
            RouteTableId: !Ref PrivateRouteTable1
            SubnetId: !Ref PrivateSubnet1

    PrivateRouteTable2:
        Type: AWS::EC2::RouteTable
        Properties: 
            VpcId: !Ref VPC
            Tags: 
                - Key: Name 
                  Value: !Sub ${EnvironmentName} Private Routes (AZ2)

    DefaultPrivateRoute2:
        Type: AWS::EC2::Route
        Properties:
            RouteTableId: !Ref PrivateRouteTable2
            DestinationCidrBlock: 0.0.0.0/0
            NatGatewayId: !Ref NatGateway2

    PrivateSubnet2RouteTableAssociation:
        Type: AWS::EC2::SubnetRouteTableAssociation
        Properties:
            RouteTableId: !Ref PrivateRouteTable2
            SubnetId: !Ref PrivateSubnet2
            
    PrivateRouteTable3:
        Type: AWS::EC2::RouteTable
        Properties: 
            VpcId: !Ref VPC
            Tags: 
                - Key: Name 
                  Value: !Sub ${EnvironmentName} Private Routes (AZ3)
                  
    DefaultPrivateRoute3:
        Type: AWS::EC2::Route
        Properties:
            RouteTableId: !Ref PrivateRouteTable3
            DestinationCidrBlock: 0.0.0.0/0
            NatGatewayId: !Ref NatGateway3

    PrivateSubnet3RouteTableAssociation:
        Type: AWS::EC2::SubnetRouteTableAssociation
        Properties:
            RouteTableId: !Ref PrivateRouteTable3
            SubnetId: !Ref PrivateSubnet3        

    PrivateRouteTable4:
        Type: AWS::EC2::RouteTable
        Properties: 
            VpcId: !Ref VPC
            Tags: 
                - Key: Name 
                  Value: !Sub ${EnvironmentName} Private Routes (AZ3)
                  
    DefaultPrivateRoute4:
        Type: AWS::EC2::Route
        Properties:
            RouteTableId: !Ref PrivateRouteTable4
            DestinationCidrBlock: 0.0.0.0/0
            NatGatewayId: !Ref NatGateway1

    PrivateSubnet4RouteTableAssociation:
        Type: AWS::EC2::SubnetRouteTableAssociation
        Properties:
            RouteTableId: !Ref PrivateRouteTable4
            SubnetId: !Ref PrivateSubnet4    


    PrivateRouteTable5:
        Type: AWS::EC2::RouteTable
        Properties: 
            VpcId: !Ref VPC
            Tags: 
                - Key: Name 
                  Value: !Sub ${EnvironmentName} Private Routes (AZ3)
                  
    DefaultPrivateRoute5:
        Type: AWS::EC2::Route
        Properties:
            RouteTableId: !Ref PrivateRouteTable5
            DestinationCidrBlock: 0.0.0.0/0
            NatGatewayId: !Ref NatGateway2

    PrivateSubnet5RouteTableAssociation:
        Type: AWS::EC2::SubnetRouteTableAssociation
        Properties:
            RouteTableId: !Ref PrivateRouteTable5
            SubnetId: !Ref PrivateSubnet5                


            ########Security GROUPS
    DBSecurityGroup:
        Type: AWS::EC2::SecurityGroup
        Properties:   
            GroupName: "no-ingress-sg"
            GroupDescription: "Security group with no ingress rule"
            VpcId: !Ref VPC
            
    DBSecurityGroupIngress:
        Type: AWS::EC2::SecurityGroupIngress
        Properties:
              IpProtocol: tcp
              FromPort: !FindInMap [!Ref "AWS::AccountId", !Ref "AWS::Region", "dbport"]
              ToPort: !FindInMap [!Ref "AWS::AccountId", !Ref "AWS::Region", "dbport"]
              SourceSecurityGroupId:  !Ref   "DBWriterLambdaSecurityGroup"
              GroupId: !Ref DBSecurityGroup

    DBSecurityGroupIngress2: # Allows Connections from EC2ConfSecurityGroup to configure database
        Type: AWS::EC2::SecurityGroupIngress
        Properties:
              IpProtocol: tcp
              FromPort: !FindInMap [!Ref "AWS::AccountId", !Ref "AWS::Region", "dbport"]
              ToPort: !FindInMap [!Ref "AWS::AccountId", !Ref "AWS::Region", "dbport"]
              SourceSecurityGroupId:  !Ref   "EC2ConfSecurityGroup"
              GroupId: !Ref DBSecurityGroup
   
   
    EC2ConfSecurityGroup:
        Type: AWS::EC2::SecurityGroup
        Properties:
            GroupName: "Jalonne-EC2-conff-SG"
            GroupDescription: EC2 Security Group for Instances to configure Database  
            VpcId: !Ref VPC
            SecurityGroupIngress:  
            - IpProtocol: tcp 
              FromPort: '22'
              ToPort: '22'
              CidrIp: 0.0.0.0/0 # change this to specific IP



    DBWriterLambdaSecurityGroup:
        Type: AWS::EC2::SecurityGroup
        Properties:
            GroupDescription: Lambda SG for downloading binary file, uploading it to S3 and writing meta to DB  
            VpcId: !Ref VPC
            SecurityGroupEgress:  
            - IpProtocol: tcp 
              FromPort: '80'
              ToPort: '80'
              CidrIp: 0.0.0.0/0 #lets allow 80 to whole internet so we dont have to specify specific ip
            - IpProtocol: tcp
              FromPort: !FindInMap [!Ref "AWS::AccountId", !Ref "AWS::Region", "dbport"]
              ToPort: !FindInMap [!Ref "AWS::AccountId", !Ref "AWS::Region", "dbport"]
              DestinationSecurityGroupId: !Ref "DBSecurityGroup"

    PullerLambdaSecurityGroup:
        Type: AWS::EC2::SecurityGroup
        Properties:
            GroupDescription: Lambda SG for downloading json from external source  
            VpcId: !Ref VPC
            SecurityGroupIngress:  
            - IpProtocol: tcp 
              FromPort: '80'
              ToPort: '80'
              CidrIp: 0.0.0.0/0 #lets allow 80 to whole internet so we dont have to specify specific ip
            - IpProtocol: tcp 
              FromPort: '443'
              ToPort: '443'
              CidrIp: 0.0.0.0/0 #lets allow 80 to whole internet so we dont have to specify specific ip
            ###############
######## Aurora
    AuroraCluster:
        Type: AWS::RDS::DBCluster
        DeletionPolicy: Snapshot 
        Properties:
            SnapshotIdentifier: !Ref "Snapshotidentifier" #remove if not needed
            Engine: aurora-postgresql
            #MasterUsername:  #disable from snapshot
            #    Ref: DatabaseUsername
            #MasterUserPassword: 
            #    Ref: DatabasePassword
            BackupRetentionPeriod: !FindInMap [!Ref "AWS::AccountId", !Ref "AWS::Region", "BackupRetentionPeriod"]
            DBClusterParameterGroupName: default.aurora-postgresql9.6
            Port: !FindInMap [!Ref "AWS::AccountId", !Ref "AWS::Region", "dbport"]
            PreferredBackupWindow: 02:00-03:00
            PreferredMaintenanceWindow: mon:04:00-mon:05:00            
            DBSubnetGroupName: 
                Ref:  DBSubnetGroup
            VpcSecurityGroupIds:
                - !Ref DBSecurityGroup
    AuroraPrimaryInstance:
        Type: AWS::RDS::DBInstance
        Properties:
            Engine: aurora-postgresql
            MultiAZ: !FindInMap [!Ref "AWS::AccountId", !Ref "AWS::Region", "dbmultiaz"]
            AllowMajorVersionUpgrade: false
            AutoMinorVersionUpgrade: true
            DBClusterIdentifier: !Ref AuroraCluster
            DBSubnetGroupName: !Ref "DBSubnetGroup"
            PubliclyAccessible: 'false'
            DBInstanceClass: !FindInMap [!Ref "AWS::AccountId", !Ref "AWS::Region", "InstanceType"]
    DBSubnetGroup:
        Type: AWS::RDS::DBSubnetGroup
        Properties:
            DBSubnetGroupDescription: CloudFormation managed DB subnet group.
            SubnetIds:
                - !Ref PrivateSubnet1
                - !Ref PrivateSubnet2
                - !Ref PrivateSubnet3
####### Lambdas    
    LambdaDataImporter: 
        Type: AWS::Lambda::Function
        Properties: 
            Handler: "index.handler"
            Role: !GetAtt LambdaExecutionRole.Arn
            Code: 
                S3Bucket: !Ref S3BucketforImporter 
                S3Key: !Ref ImporterLocation 
            Runtime: "java8"
            Timeout: "300"
            TracingConfig:
                Mode: "Active"
            VpcConfig:
                SecurityGroupIds:
                    - !Ref   "DBWriterLambdaSecurityGroup"
                SubnetIds:
                    - !Ref PrivateSubnet4
                    - !Ref PrivateSubnet5

            Environment:
                Variables:
                    dbport: !FindInMap [!Ref "AWS::AccountId", !Ref "AWS::Region", "dbport"]
                    dbWriteURL: !GetAtt AuroraCluster.Endpoint.Address
                    imagesS3Bucket: !Ref S3ImageBucketName

                    

###Lambda invoker                    
    LambdaInvokePermission:
        Type: 'AWS::Lambda::Permission'
        DependsOn:
            - LambdaDataImporter
        Properties:
            Action: 'lambda:InvokeFunction'
            FunctionName: !GetAtt LambdaDataImporter.Arn
            Principal: "s3.amazonaws.com"
            SourceAccount: !Ref 'AWS::AccountId'
            SourceArn: !Join [ ":", [ arn, aws, s3, "", "", !Ref S3JobBucketName ]]

        

############# S3 Buckets

    PicturesS3:
        Type: AWS::S3::Bucket
        Properties:
          #  BucketEncryption:
          #      ServerSideEncryptionConfiguration: 
          #         -ServerSideEncryptionByDefault
            BucketName: !FindInMap [!Ref "AWS::AccountId", !Ref "AWS::Region", "imagestore"]
            #LifecycleConfiguration:
            Tags:
                - Key: Name 
                  Value: !Sub ${EnvironmentName} s3 pictures
            VersioningConfiguration:
                Status: Enabled
                
    JalonneHallintaEc2:
        Type: AWS::EC2::Instance
        Properties: 
          InstanceType: t2.micro  
          ImageId: "ami-0233214e13e500f77"
          KeyName: !Ref JalonneKeyPair
          SubnetId: !Ref PublicSubnet1
          SecurityGroupIds:
             -  !GetAtt EC2ConfSecurityGroup.GroupId

                
    JobBucket:
        Type: AWS::S3::Bucket
        DependsOn:
            - LambdaInvokePermission
        Properties: 
            BucketName: !Ref S3JobBucketName
            NotificationConfiguration: 
                LambdaConfigurations:
                    - 
                        Event: s3:ObjectCreated:*
                        Function: !GetAtt LambdaDataImporter.Arn
                    #Filter:
                        #S3Key:
                            #Rules:
                               # - name: suffix
                               #   value: json
          # BucketEncryption:
          #     ServerSideEncryptionConfiguration: 
          #         ServerSideEncryptionByDefault
          
                               

           # Tags:
             #   -S3JobBucket
            #LifecycleConfiguration:




############# IAM ROLES            
    LambdaExecutionRole:
        Type: AWS::IAM::Role
        Properties:
            AssumeRolePolicyDocument:
                Version: '2012-10-17'
                Statement:
                - Effect: Allow
                  Principal:
                    Service:
                    - lambda.amazonaws.com
                  Action:
                    - sts:AssumeRole
            Path: "/"
            Policies:
            - PolicyName: root
              PolicyDocument:
                Version: '2012-10-17'
                Statement:
                - Effect: Allow
                  Action:
                  - logs:*
                  - ec2:DescribeNetworkInterfaces
                  - ec2:CreateNetworkInterface
                  - ec2:DeleteNetworkInterface
                  - xray:*
                  - s3:*
                  - rds:* #restrict these
                  Resource: "*"

    LambdaPullerExecutionRole:
        Type: AWS::IAM::Role
        Properties:
            AssumeRolePolicyDocument:
                Version: '2012-10-17'
                Statement:
                - Effect: Allow
                  Principal:
                    Service:
                    - lambda.amazonaws.com
                  Action:
                    - sts:AssumeRole
            Path: "/"
            Policies:
            - PolicyName: root
              PolicyDocument:
                Version: '2012-10-17'
                Statement:
                - Effect: Allow
                  Action:
                  - logs:*
                  - ec2:DescribeNetworkInterfaces
                  - ec2:CreateNetworkInterface
                  - ec2:DeleteNetworkInterface
                  - xray:*
                  - s3:*
                  Resource: "*"
    
    LambdaQuerynRole:
        Type: AWS::IAM::Role
        Properties:
            AssumeRolePolicyDocument:
                Version: '2012-10-17'
                Statement:
                - Effect: Allow
                  Principal:
                    Service:
                    - lambda.amazonaws.com
                  Action:
                    - sts:AssumeRole
            Path: "/"
            Policies:
            - PolicyName: root
              PolicyDocument:
                Version: '2012-10-17'
                Statement:
                - Effect: Allow
                  Action:
                  - logs:*
                  - ec2:DescribeNetworkInterfaces
                  - ec2:CreateNetworkInterface
                  - ec2:DeleteNetworkInterface
                  - xray:*
                  - s3:*
                  Resource: "*"

Outputs: 
    VPC: 
        Description: A reference to the created VPC
        Value: !Ref VPC

    PublicSubnets:
        Description: A list of the public subnets
        Value: !Join [ ",", [ !Ref PublicSubnet1, !Ref PublicSubnet2,!Ref PublicSubnet3 ]]

    PrivateSubnets:

        Description: A list of the private subnets
        Value: !Join [ ",", [ !Ref PrivateSubnet1, !Ref PrivateSubnet2, !Ref PrivateSubnet3]]

    PublicSubnet1:
        Description: A reference to the public subnet in the 1st Availability Zone
        Value: !Ref PublicSubnet1

    PublicSubnet2: 
        Description: A reference to the public subnet in the 2nd Availability Zone
        Value: !Ref PublicSubnet2        

    PublicSubnet3: 
        Description: A reference to the public subnet in the 3nd Availability Zone
        Value: !Ref PublicSubnet3

    DBSubnet1:
        Description: A reference to the private subnet in the 1st Availability Zone
        Value: !Ref PrivateSubnet1
        "Export" : { "Name" : {"Fn::Sub": "${AWS::StackName}-PrivateSubnet1" }}
    DBSubnet2: 
        Description: A reference to the private subnet in the 2nd Availability Zone
        Value: !Ref PrivateSubnet2
        "Export" : { "Name" : {"Fn::Sub": "${AWS::StackName}-PrivateSubnet2" }}    
    DBSubnet3: 
        Description: A reference to the private subnet in the 3nd Availability Zone
        Value: !Ref PrivateSubnet3
        "Export" : { "Name" : {"Fn::Sub": "${AWS::StackName}-PrivateSubnet3" }}
    LambdaSubnet4: 
        Description: A reference to the Lambda private subnet in the 1nd Availability Zone
        Value: !Ref PrivateSubnet4
        "Export" : { "Name" : {"Fn::Sub": "${AWS::StackName}-PrivateSubnet4" }}
    LambdaSubnet5: 
        Description: A reference to the Lambda private subnet in the 2nd Availability Zone
        Value: !Ref PrivateSubnet5
        "Export" : { "Name" : {"Fn::Sub": "${AWS::StackName}-PrivateSubnet5" }}        
        
    DBSecurityGroup:
        Description: Security group with no ingress rule
        Value: !Ref DBSecurityGroup
    
    AuroraDbURL:
        Description: Aurora Database URL
        Value: !GetAtt AuroraCluster.Endpoint.Address

    JobBucket:
        Description: S3BucketForJobs
        Value: !Ref JobBucket
        "Export" : { "Name" : {"Fn::Sub": "${AWS::StackName}-S3JobBucket" }}

    LambdaPullerExecutionRole:
        Description: Lambda Puller ExecutionRole
        Value: !GetAtt LambdaPullerExecutionRole.Arn
        "Export" : { "Name" : {"Fn::Sub": "${AWS::StackName}-LambdaPullerExecutionRole" }}

    PullerLambdaSGroup:
        Description: Security Group ID for Puller Lambda
        Value: !GetAtt PullerLambdaSecurityGroup.GroupId
        "Export" : { "Name" : {"Fn::Sub": "${AWS::StackName}-PullerLambdaSecurityGroup" }}


